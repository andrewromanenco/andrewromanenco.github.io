{"version":3,"sources":["MessageOp.js","MessageBroker.js","Node.js","PauseOp.js","DeliverOp.js","basic-paxos/AcceptorNode.js","basic-paxos/AcceptedOp.js","basic-paxos/AcceptOp.js","basic-paxos/PromiseOp.js","basic-paxos/PrepareOp.js","basic-paxos/SendPrepareOp.js","basic-paxos/ProposerNode.js","basic-paxos/LearnerNode.js","basic-paxos/BasicPaxosExample.js","App.js","reportWebVitals.js","index.js"],"names":["MessageOp","toName","fromName","String","Error","this","to","from","op","constructor","name","node","tickNumber","MessageBroker","nodes","brokenLinks","newNode","forEach","push","blockedPairsList","JSON","parse","Array","isArray","console","log","badElements","el","error","stringify","e","message","blocked","pair","delivered","scheduleOp","role","shuffle","result","hasRole","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Node","roles","queue","messageBroker","state","registerNode","q","unshift","shift","execute","includes","PauseOp","sleep","scheduleOpOnTop","DeliverOp","messagesToDeliver","msg","sendMessage","AcceptorNode","AcceptedOp","value","acceptedValues","AcceptOp","proposalNumber","proposedBy","poposedBy","findByRole","learner","accepted","deliverOp","PromiseOp","alreadyAccepted","quorum","minForQuorum","Object","keys","maxProposalNumber","maxProposedBy","entries","v","acceptor","accept","PrepareOp","assert","acceptedValue","SendPrepareOp","acceptors","prepare","ProposerNode","LearnerNode","Initializer","bind","App","props","example","create","tick","sleepTicks","nodeToSleep","handleBrokenLinksChange","handleSleepTicksChange","handleNodeToSleepChange","addSleepToNode","validateBrokenLinks","scheduledTicks","hasScheduledOps","newTick","newNodes","setState","parseInt","event","setBrokenLinks","target","controlUI","Button","variant","onClick","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","ind","k","TextField","label","onChange","multiline","fullWidth","rows","Select","MenuItem","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe0e43c5.chunk.js","sourcesContent":["/*\nEvery message is actually an operation to be executed by node on tick.\nSome operations are local, e.g. sleep; others are messages being\nsend via the message broker.\n\nThis is the parent for all sendable messages.\n*/\nclass MessageOp {\n  constructor(toName, fromName) {\n    if (typeof toName !== 'string' && toName instanceof String) {\n      throw new Error(\"toName must be a string\");\n    }\n    if (typeof fromName !== 'string' && fromName instanceof String) {\n      throw new Error(\"fromName must be a string\");\n    }\n    this.to = toName;\n    this.from = fromName;\n    this.op = this.constructor.name;\n  }\n\n  execute(node, tickNumber) {\n    throw new Error(\"Must override this method\");\n  }\n}\n\nexport default MessageOp;\n","import MessageOp from './MessageOp';\n\n/*\nMain message bus - simulated network.\nAllows connections b/n all nodes. Supports blocking channels b/n nodes.\n*/\nclass MessageBroker {\n  constructor() {\n    this.nodes = [];\n    this.brokenLinks = \"[]\";\n  }\n\n  /*\n  Registered node is discoverable by name and role.\n  */\n  registerNode(newNode) {\n    this.nodes.forEach(node => {\n      if (node.name === newNode.name) {\n        throw new Error('Name already registered: ' + node.name);\n      }\n    });\n    this.nodes.push(newNode);\n  }\n\n  /*\n  Broken links is a list of pairs of node names to block communication channel.\n  This is used to simulate network partitioning.\n  The config is supplied by user input and this methiod checks if the input\n  is valid.\n  */\n  validateBrokenLinks() {\n    try {\n      const blockedPairsList = JSON.parse(this.brokenLinks);\n      if (!Array.isArray(blockedPairsList)) {\n        console.log(\"Broken list must be an array of pairs\");\n        return false;\n      }\n      var badElements = false;\n      blockedPairsList.forEach(el => {\n        if (!Array.isArray(el)) {\n          badElements = true;\n          console.error('Elements of block list must by lists like [\"A\", \"B\"] but got ' + JSON.stringify(el));\n        }\n      });\n      if (badElements) {\n        return false;\n      }\n    } catch(e) {\n      console.log(\"Bad json for broken list, must be json, e.g. '[]' for empty\");\n      return false;\n    };\n    return true;\n  }\n\n  /*\n  Yes, sendMessage method does send a message\n  Message us delivered to target node's execution queue.\n  Message is plain object and must have \"to\", \"from\" and \"op\".\n  Messgae is deliverd unless the channel b/n nodes is offline.\n  */\n  sendMessage(message) {\n    if (!(message instanceof MessageOp)) {\n      throw Error('The message to send is not an instance of MessageOp: ' + JSON.stringify(message));\n    }\n    const blockedPairsList = JSON.parse(this.brokenLinks);\n    var blocked = false;\n    blockedPairsList.forEach(pair => {\n      if (((pair[0] === message.to)&&(pair[1] === message.from))\n          ||((pair[1] === message.to)&&(pair[0] === message.from))) {\n            blocked = true;\n          }\n    });\n    if (blocked) {\n      console.log(\"Message is dropped due to block rule.\");\n      return;\n    }\n    var delivered = false;\n    this.nodes.forEach(node => {\n      if (node.name === message.to) {\n        node.scheduleOp(message);\n        delivered = true;\n      }\n    });\n    if (!delivered) {\n      throw new Error('Failed to deliver message: ' + JSON.stringify(message));\n    }\n  }\n\n  /*\n  Finds all registered nodes with given role.\n  */\n  findByRole(role, shuffle) {\n    const result = [];\n    this.nodes.forEach(node => {\n      if (node.hasRole(role)) {\n        result.push(node);\n      }\n    });\n\n    if (shuffle) {\n      var currentIndex = result.length, temporaryValue, randomIndex;\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = result[currentIndex];\n        result[currentIndex] = result[randomIndex];\n        result[randomIndex] = temporaryValue;\n      }\n    }\n    return result;\n  }\n\n  /*\n  Setter for channel blocking (to simulate network partition).\n  */\n  setBrokenLinks(brokenLinks) {\n    this.brokenLinks = brokenLinks;\n  }\n}\n\nexport default MessageBroker;\n","// Base class for all nodes\nclass Node {\n  // Each node has a name and optional roles.\n  // Roles are used for node selection.\n  constructor(name, roles) {\n    this.name = name;\n    if (roles) {\n      if (Array.isArray(roles)) {\n        this.roles = roles;\n      } else {\n        this.roles = [roles];\n      }\n    } else {\n      this.roles = [];\n    }\n    this.queue = [];\n    this.messageBroker = null;\n    this.state = {};\n  }\n\n  // Registers the node with the message bus\n  bind(messageBroker) {\n    this.messageBroker = messageBroker;\n    messageBroker.registerNode(this);\n    return this;\n  }\n\n  // Add an operation into the execution queue. Add to tail.\n  // Each tick one operation is executed.\n  scheduleOp(op) {\n    const q = [...this.queue];\n    q.push(op);\n    this.queue = q;\n  }\n\n  // Adds operations as the next to be executed.\n  scheduleOpOnTop(op) {\n    const q = [...this.queue];\n    q.unshift(op);\n    this.queue = q;\n  }\n\n  // Called every tick and executed next operation from the exec. queue.\n  tick(tickNumber) {\n    if (!this.messageBroker) {\n      throw new Error(\"Message broker is not set for \" + this.name);\n    }\n    if (this.queue.length === 0) {\n      return;\n    }\n    const op = this.queue.shift();\n    op.execute(this, tickNumber);\n  }\n\n  // Check if this node has operations to excute.\n  hasScheduledOps() {\n    return (this.queue.length > 0);\n  }\n\n  // Check if the node has a specific role.\n  hasRole(role) {\n    return this.roles.includes(role);\n  }\n}\n\nexport default Node;\n","/*\nNon sendable operation, which sleeps for the given number of ticks.\nThis operation may simulate a node being busy. The node will still be\nable to receive messages, but win't process them.\n*/\nclass PauseOp {\n  constructor(sleep) {\n    this.sleep = sleep;\n  }\n\n  execute(node, tickNumber) {\n    if (this.sleep > 1) {\n      console.log(\"Still sleeping for \" + (this.sleep - 1));\n      node.scheduleOpOnTop(new PauseOp(this.sleep - 1));\n    } else {\n      console.log(\"Slept enough\");\n    }\n  }\n\n}\n\nexport default PauseOp;\n","import MessageOp from './MessageOp';\n\n/*\nWhen a node wants to send a broadcast, there are two options: either send\nall messages at once or send them one by one. The difference is how \"fast\"\nthe sender is.\nThis class is a helper to send messages one by one, consuming a tick for each.\nThe node uses this class to \"schedule\" messages, they are added to the queue\nand executed as any other command.\n*/\nclass DeliverOp {\n  constructor(messagesToDeliver) {\n    if (!Array.isArray(messagesToDeliver)) {\n      throw new Error(\"The parameter has to be a list\");\n    }\n    messagesToDeliver.forEach(msg => {\n      if (!(msg instanceof MessageOp)) {\n        throw new Error(\"Can only deliver MessageOp instances: \" + JSON.stringify(msg));\n      }\n    });\n    this.messagesToDeliver = messagesToDeliver;\n  }\n\n  execute(node, tickNumber) {\n    this.messagesToDeliver.forEach(msg => {\n      console.log(`Sent ${msg.op} to ${msg.to}`);\n      node.messageBroker.sendMessage(msg);\n    });\n  }\n}\n\nexport default DeliverOp;\n","import Node from '../Node';\n\n/*\nAcceptor.\n*/\nclass AcceptorNode extends Node {\n  constructor(name) {\n    super(name, 'acceptor');\n    this.state['proposalNumber'] = 0;\n    this.state['proposedBy'] = '';\n  }\n\n}\n\nexport default AcceptorNode;\n","import MessageOp from '../MessageOp';\n\n/*\nAccepted message called on learners when an accpetor accepts a value.\n*/\nclass AcceptedOp extends MessageOp {\n  constructor(toName, fromName, value) {\n    super(toName, fromName);\n    this.value = value;\n  }\n  execute(node, tickNumber) {\n    console.log(`Learner ${node.name} notified about value: ${this.value}`);\n    node.state.acceptedValues[this.from] = this.value;\n  }\n}\n\nexport default AcceptedOp;\n","import MessageOp from '../MessageOp';\nimport AcceptedOp from './AcceptedOp';\nimport DeliverOp from '../DeliverOp';\n\n/*\nAccept operation called on acceptors.\n*/\nclass AcceptOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber, value) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n    this.value = value;\n  }\n  execute(node, tickNumber) {\n    console.log('Accepted check');\n    if ((this.proposalNumber > node.state.proposalNumber)||\n      ((this.proposalNumber === node.state.proposalNumber)&&(this.from >= node.state.proposedBy))) {\n      console.log(\"Accepting value: \" + this.value);\n      node.state['acceptedValue'] = {\n        proposalNumber: this.proposalNumber,\n        poposedBy: this.from,\n        value: this.value\n      };\n      const learners = node.messageBroker.findByRole('learner', true);\n      learners.forEach(learner => {\n        const accepted = new AcceptedOp(learner.name, node.name, this.value);\n        const deliverOp = new DeliverOp([accepted]);\n        node.scheduleOp(deliverOp);\n      });\n    } else {\n      console.log(\"Got older accept, ignoring\");\n    }\n  }\n}\n\nexport default AcceptOp;\n","import MessageOp from '../MessageOp';\nimport AcceptOp from './AcceptOp';\nimport DeliverOp from '../DeliverOp';\n\n/*\nPromise processing on a proposer.\n*/\nclass PromiseOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber, alreadyAccepted) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n    this.alreadyAccepted = alreadyAccepted;\n  }\n  execute(node, tickNumber) {\n    if (this.proposalNumber !==   node.state.proposalNumber) {\n      console.log(`Was expecting promise on ${node.state.proposalNumber - 1}, but got ${this.proposalNumber}. Ignoring.`);\n      return;\n    }\n    node.state.quorum[this.from] = [this.alreadyAccepted];\n    const minForQuorum = Math.floor(node.messageBroker.findByRole('learner').length/2) + 1;\n    if (Object.keys(node.state.quorum).length === minForQuorum) {\n      console.log(`Got the majority(${minForQuorum}), sending accepts`);\n      var value = null;\n      var maxProposalNumber = 0;\n      var maxProposedBy = '';\n      Object.entries(node.state.quorum).forEach(([k,v]) => {\n        if (v[0]) {\n          if (value) {\n            if ((v[0].proposalNumber > maxProposalNumber)||(\n              (v[0].proposalNumber === maxProposalNumber)||(v[0].proposedBy > maxProposedBy)\n            )) {\n              value = v[0].value;\n              maxProposalNumber = v[0].proposalNumber;\n              maxProposedBy = v[0].proposedBy;\n            }\n          } else {\n            value = v[0]['value'];\n          }\n        }\n      });\n      if (!value) {\n        value = node.name + \"/\" + node.state.proposalNumber;\n      }\n      console.log(\"The value to send: \" + value);\n      const acceptors = node.messageBroker.findByRole('acceptor');\n      acceptors.forEach(acceptor => {\n        console.log(\"Scheduling accept for \" + acceptor.name);\n        const accept = new AcceptOp(acceptor.name, node.name, this.proposalNumber, value);\n        const deliverOp = new DeliverOp([accept]);\n        node.scheduleOp(deliverOp);\n      });\n    } else {\n      console.log(`No majority(${minForQuorum}) yet`);\n    }\n  }\n}\n\nexport default PromiseOp;\n","import MessageOp from '../MessageOp';\nimport AcceptorNode from './AcceptorNode';\nimport PromiseOp from './PromiseOp';\n\n/*\nPrepare processing on acceptors.\n*/\nclass PrepareOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n  }\n  execute(node, tickNumber) {\n    console.assert(node instanceof AcceptorNode);\n    if ((this.proposalNumber > node.state.proposalNumber)||\n      ((this.proposalNumber === node.state.proposalNumber)&&(this.from > node.state.proposedBy))) {\n      console.log(`Promising ${this.proposalNumber} to ${this.from}`);\n      node.state.proposalNumber = this.proposalNumber;\n      node.state.proposedBy = this.from;\n      node.messageBroker.sendMessage(\n        new PromiseOp(this.from, node.name, node.state.proposalNumber, node.state.acceptedValue));\n    } else {\n      console.log(`Prepare is too old ${this.proposalNumber} vs ${node.state.proposalNumber}, and ${this.from} vs ${node.state.proposedBy}. Ignoring.`);\n    }\n  }\n}\n\nexport default PrepareOp;\n","import DeliverOp from '../DeliverOp';\nimport PrepareOp from './PrepareOp';\nimport PauseOp from '../PauseOp';\n\n/*\nSend a proposal to all acceptors. Also, adds a random delay to have some\nvariance in the process.\n*/\nclass SendPrepareOp {\n  constructor() {\n    this.op = this.constructor.name;\n  }\n\n  execute(node, tickNumber) {\n    const acceptors = node.messageBroker.findByRole('acceptor', true);\n    console.log(`Sending a proposal to ${acceptors.length} acceptors.`);\n    acceptors.forEach(acceptor => {\n      const prepare = new PrepareOp(acceptor.name, node.name, node.state.proposalNumber + 1);\n      const deliverOp = new DeliverOp([prepare]);\n      node.scheduleOp(new PauseOp(Math.floor(Math.random() * Math.floor(20))));\n      node.scheduleOp(deliverOp);\n    });\n    node.state.proposalNumber = node.state.proposalNumber + 1;\n  }\n}\n\nexport default SendPrepareOp;\n","import Node from '../Node';\nimport PauseOp from '../PauseOp';\nimport SendPrepareOp from './SendPrepareOp';\n\n/*\nProposal will propose it's name as a value to agree on.\nOn start, proposal adds a random sleep to add a bit of variance to the flow.\n*/\nclass ProposerNode extends Node {\n  constructor(name) {\n    super(name, 'proposer');\n    this.queue = [\n      new PauseOp(Math.floor(Math.random() * Math.floor(25))),\n      new SendPrepareOp()\n    ];\n    this.state['proposalNumber'] = 0;\n    this.state['quorum'] = {};\n  }\n}\n\nexport default ProposerNode;\n","import Node from '../Node';\n\n/*\nLearner hold a list of accepted values from each acceptor.\nDuring progress acceptors may change they votes, but eventually\nthey will all get the same one.\n*/\nclass LearnerNode extends Node {\n  constructor(name) {\n    super(name, 'learner');\n    this.state['acceptedValues'] = {};\n  }\n}\n\nexport default LearnerNode;\n","import ProposerNode from './ProposerNode';\nimport AcceptorNode from './AcceptorNode';\nimport LearnerNode from './LearnerNode';\n\n/*\nBasic paxos example.\nTwo proposers, three acceptors and two learners.\nEach proposer proposes its name.\nEach roposer has a random inital delay to add a bit of variance.\n*/\nclass Initializer {\n  create(messageBroker) {\n    new ProposerNode('Proposer-A').bind(messageBroker);\n    new ProposerNode('Proposer-B').bind(messageBroker);\n    new ProposerNode('Proposer-C').bind(messageBroker);\n\n    new AcceptorNode('Acceptor-X').bind(messageBroker);\n    new AcceptorNode('Acceptor-Y').bind(messageBroker);\n    new AcceptorNode('Acceptor-Z').bind(messageBroker);\n\n    new LearnerNode('Learner-M').bind(messageBroker);\n    new LearnerNode('Learner-N').bind(messageBroker);\n  }\n\n  controlUI() {\n    return (\n      <div>\n        <h1>Basic Paxos</h1>\n        <div>Open debug console to see log message. Keep clicking Tick for step-by-step progress.</div>\n        <div>Proposers propose their names and learners see the eventual agreement.</div>\n      </div>\n    );\n  }\n}\n\nexport default Initializer;\n","import './App.css';\nimport MessageBroker from './MessageBroker';\n//import Initializer from './heartbeat/HeartBeatExample'\n//import Initializer from './ping/PingExample'\nimport Initializer from './basic-paxos/BasicPaxosExample'\n//import Initializer from './multi-paxos/MultiPaxosExample'\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport PauseOp from './PauseOp';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messageBroker = new MessageBroker();\n    this.example = new Initializer();\n    this.example.create(this.messageBroker);\n    if (this.messageBroker.nodes.length === 0) {\n      throw new Error(\"No nodes to work with\");\n    }\n    this.state = {\n      nodes: [...this.messageBroker.nodes],\n      tick: 1,\n      brokenLinks: \"[]\",\n      sleepTicks: \"0\",\n      nodeToSleep: this.messageBroker.nodes[0].name\n    }\n    this.tick = this.tick.bind(this);\n    this.handleBrokenLinksChange = this.handleBrokenLinksChange.bind(this);\n    this.handleSleepTicksChange = this.handleSleepTicksChange.bind(this);\n    this.handleNodeToSleepChange = this.handleNodeToSleepChange.bind(this);\n    this.addSleepToNode = this.addSleepToNode.bind(this);\n  }\n\n  /*\n  The \"main\" method. On exec it goes over all nodes and executes one\n  operation from nodes' queues.\n  */\n  tick() {\n    if (!this.messageBroker.validateBrokenLinks()) {\n      return;\n    }\n    console.log(\"Start with tick \" + this.state.tick);\n    const scheduledTicks = [];\n    this.state.nodes.forEach(node => {\n      if (node.hasScheduledOps()) {\n        scheduledTicks.push(node);\n      }\n    });\n    scheduledTicks.forEach(node => {\n      console.log(\"Tick on \" + node.name);\n      node.tick(this.state.tick);\n    });\n    console.log(\"Done with tick \" + this.state.tick);\n    console.log(\"------------------------\");\n    const newTick = this.state.tick + 1;\n    const newNodes = [...this.messageBroker.nodes];\n    this.setState({\n      tick: newTick,\n      nodes: newNodes,\n    });\n  }\n\n  /*\n  Simulates a node being \"frozen\" for a bit.\n  */\n  addSleepToNode() {\n    this.state.nodes.forEach(node => {\n      if (node.name === this.state.nodeToSleep) {\n        console.log(\"Added sleep to \" + node.name);\n        node.scheduleOpOnTop(new PauseOp(parseInt(this.state.sleepTicks)));\n      }\n    });\n    this.setState({nodes: [...this.state.nodes]});\n  }\n\n  handleBrokenLinksChange(event) {\n    this.messageBroker.setBrokenLinks(event.target.value);\n    this.setState({brokenLinks: event.target.value});\n  }\n\n  handleSleepTicksChange(event) {\n    this.setState({sleepTicks: event.target.value});\n  }\n\n  handleNodeToSleepChange(event) {\n    this.setState({nodeToSleep: event.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        {this.example.controlUI()}\n        <Button variant=\"contained\" onClick={this.tick}>Tick ({this.state.tick})</Button><br/>\n        <TableContainer>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Node name</TableCell>\n                <TableCell>Incoming queue</TableCell>\n                <TableCell>State</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.nodes.map((node) => (\n                <TableRow key={node.name}>\n                  <TableCell>\n                    {node.name}\n                  </TableCell>\n                  <TableCell>\n                    {node.queue.map((item, ind) => (<div key={node.name + item.op + ind}>{JSON.stringify(item)}</div>))}\n                  </TableCell>\n                  <TableCell>\n                  {Object.entries(node.state).map(([k,v]) => (\n                    <div key={node.name + k}><pre>{k}: {JSON.stringify(v, null, 2)}</pre></div>\n                  ))}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TextField\n        label='Json list of pairs of broken list. E.g. [[\"A\", \"B\"], [\"A\", \"C\"]] messages b/n A<->B and A<->C will be dropped.'\n        value={this.state.brokenLinks}\n        onChange={this.handleBrokenLinksChange}\n        multiline={true}\n        fullWidth={true}\n        rows=\"10\" /><br/>\n        <TextField\n        label='Sleep length in ticks'\n        value={this.state.sleepTicks}\n        onChange={this.handleSleepTicksChange}\n        multiline={false}\n        fullWidth={false}\n        rows=\"1\" />\n        <Select value={this.state.nodeToSleep} onChange={this.handleNodeToSleepChange}>\n          {this.state.nodes.map(node => (\n            <MenuItem key={node.name} value={node.name}>{node.name}</MenuItem>\n          ))}\n        </Select>\n        <Button variant=\"contained\" onClick={this.addSleepToNode}>Add sleep to {this.state.nodeToSleep}</Button><br/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}