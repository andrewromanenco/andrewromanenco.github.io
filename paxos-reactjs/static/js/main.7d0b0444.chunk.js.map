{"version":3,"sources":["MessageOp.js","MessageBroker.js","Node.js","DeliverOp.js","multi-paxos/AcceptedOp.js","multi-paxos/AcceptOp.js","multi-paxos/PromiseOp.js","multi-paxos/Paxos.js","multi-paxos/PrepareOp.js","multi-paxos/CustomerResultOp.js","multi-paxos/PaxosNode.js","multi-paxos/CustomerCommand.js","multi-paxos/ClientNode.js","multi-paxos/MultiPaxosExample.js","PauseOp.js","App.js","reportWebVitals.js","index.js"],"names":["MessageOp","toName","fromName","String","Error","this","to","from","op","constructor","name","node","tickNumber","MessageBroker","nodes","brokenLinks","newNode","forEach","push","blockedPairsList","JSON","parse","Array","isArray","console","log","badElements","el","error","stringify","e","message","blocked","pair","delivered","scheduleOp","role","shuffle","result","hasRole","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Node","roles","queue","messageBroker","state","registerNode","q","unshift","shift","execute","includes","DeliverOp","messagesToDeliver","msg","sendMessage","AcceptedOp","paxosInstanceId","value","paxosInstance","paxos","gotFinalValue","finalValue","instanceId","logFinalValue","AcceptOp","proposalNumber","isBehind","isSame","accept","findByRole","learner","accepted","deliverOp","PromiseOp","acceptedValue","assert","promises","promisesCount","Object","keys","majority","pickLargestAcceptedValue","valueToSend","acceptor","Paxos","nodesCount","promisedProposalNumber","promisedProposalTo","acceptedByOthers","proposedBy","acceptedBy","majorValue","majorCount","entries","v","selectedValue","maxProposalNumber","maxProposedBy","PrepareOp","updatePromise","CustomerResultOp","status","progress","PaxosNode","indexToAdd","valueToSendAtIndex","prepare","logIndex","currentEntry","CustomerCommand","paxosNodes","values","startsWith","sent","i","addToLog","ClientNode","Initializer","clientNode","bind","send","Button","variant","onClick","sendNext","PauseOp","sleep","scheduleOpOnTop","App","props","example","create","tick","sleepTicks","nodeToSleep","handleBrokenLinksChange","handleSleepTicksChange","handleNodeToSleepChange","addSleepToNode","validateBrokenLinks","scheduledTicks","hasScheduledOps","newTick","newNodes","setState","parseInt","event","setBrokenLinks","target","controlUI","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","ind","k","TextField","label","onChange","multiline","fullWidth","rows","Select","MenuItem","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d0b0444.chunk.js","sourcesContent":["/*\nEvery message is actually an operation to be executed by node on tick.\nSome operations are local, e.g. sleep; others are messages being\nsend via the message broker.\n\nThis is the parent for all sendable messages.\n*/\nclass MessageOp {\n  constructor(toName, fromName) {\n    if (typeof toName !== 'string' && toName instanceof String) {\n      throw new Error(\"toName must be a string\");\n    }\n    if (typeof fromName !== 'string' && fromName instanceof String) {\n      throw new Error(\"fromName must be a string\");\n    }\n    this.to = toName;\n    this.from = fromName;\n    this.op = this.constructor.name;\n  }\n\n  execute(node, tickNumber) {\n    throw new Error(\"Must override this method\");\n  }\n}\n\nexport default MessageOp;\n","import MessageOp from './MessageOp';\n\n/*\nMain message bus - simulated network.\nAllows connections b/n all nodes. Supports blocking channels b/n nodes.\n*/\nclass MessageBroker {\n  constructor() {\n    this.nodes = [];\n    this.brokenLinks = \"[]\";\n  }\n\n  /*\n  Registered node is discoverable by name and role.\n  */\n  registerNode(newNode) {\n    this.nodes.forEach(node => {\n      if (node.name === newNode.name) {\n        throw new Error('Name already registered: ' + node.name);\n      }\n    });\n    this.nodes.push(newNode);\n  }\n\n  /*\n  Broken links is a list of pairs of node names to block communication channel.\n  This is used to simulate network partitioning.\n  The config is supplied by user input and this methiod checks if the input\n  is valid.\n  */\n  validateBrokenLinks() {\n    try {\n      const blockedPairsList = JSON.parse(this.brokenLinks);\n      if (!Array.isArray(blockedPairsList)) {\n        console.log(\"Broken list must be an array of pairs\");\n        return false;\n      }\n      var badElements = false;\n      blockedPairsList.forEach(el => {\n        if (!Array.isArray(el)) {\n          badElements = true;\n          console.error('Elements of block list must by lists like [\"A\", \"B\"] but got ' + JSON.stringify(el));\n        }\n      });\n      if (badElements) {\n        return false;\n      }\n    } catch(e) {\n      console.log(\"Bad json for broken list, must be json, e.g. '[]' for empty\");\n      return false;\n    };\n    return true;\n  }\n\n  /*\n  Yes, sendMessage method does send a message\n  Message us delivered to target node's execution queue.\n  Message is plain object and must have \"to\", \"from\" and \"op\".\n  Messgae is deliverd unless the channel b/n nodes is offline.\n  */\n  sendMessage(message) {\n    if (!(message instanceof MessageOp)) {\n      throw Error('The message to send is not an instance of MessageOp: ' + JSON.stringify(message));\n    }\n    const blockedPairsList = JSON.parse(this.brokenLinks);\n    var blocked = false;\n    blockedPairsList.forEach(pair => {\n      if (((pair[0] === message.to)&&(pair[1] === message.from))\n          ||((pair[1] === message.to)&&(pair[0] === message.from))) {\n            blocked = true;\n          }\n    });\n    if (blocked) {\n      console.log(\"Message is dropped due to block rule.\");\n      return;\n    }\n    var delivered = false;\n    this.nodes.forEach(node => {\n      if (node.name === message.to) {\n        node.scheduleOp(message);\n        delivered = true;\n      }\n    });\n    if (!delivered) {\n      throw new Error('Failed to deliver message: ' + JSON.stringify(message));\n    }\n  }\n\n  /*\n  Finds all registered nodes with given role.\n  */\n  findByRole(role, shuffle) {\n    const result = [];\n    this.nodes.forEach(node => {\n      if (node.hasRole(role)) {\n        result.push(node);\n      }\n    });\n\n    if (shuffle) {\n      var currentIndex = result.length, temporaryValue, randomIndex;\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = result[currentIndex];\n        result[currentIndex] = result[randomIndex];\n        result[randomIndex] = temporaryValue;\n      }\n    }\n    return result;\n  }\n\n  /*\n  Setter for channel blocking (to simulate network partition).\n  */\n  setBrokenLinks(brokenLinks) {\n    this.brokenLinks = brokenLinks;\n  }\n}\n\nexport default MessageBroker;\n","// Base class for all nodes\nclass Node {\n  // Each node has a name and optional roles.\n  // Roles are used for node selection.\n  constructor(name, roles) {\n    this.name = name;\n    if (roles) {\n      if (Array.isArray(roles)) {\n        this.roles = roles;\n      } else {\n        this.roles = [roles];\n      }\n    } else {\n      this.roles = [];\n    }\n    this.queue = [];\n    this.messageBroker = null;\n    this.state = {};\n  }\n\n  // Registers the node with the message bus\n  bind(messageBroker) {\n    this.messageBroker = messageBroker;\n    messageBroker.registerNode(this);\n    return this;\n  }\n\n  // Add an operation into the execution queue. Add to tail.\n  // Each tick one operation is executed.\n  scheduleOp(op) {\n    const q = [...this.queue];\n    q.push(op);\n    this.queue = q;\n  }\n\n  // Adds operations as the next to be executed.\n  scheduleOpOnTop(op) {\n    const q = [...this.queue];\n    q.unshift(op);\n    this.queue = q;\n  }\n\n  // Called every tick and executed next operation from the exec. queue.\n  tick(tickNumber) {\n    if (!this.messageBroker) {\n      throw new Error(\"Message broker is not set for \" + this.name);\n    }\n    if (this.queue.length === 0) {\n      return;\n    }\n    const op = this.queue.shift();\n    op.execute(this, tickNumber);\n  }\n\n  // Check if this node has operations to excute.\n  hasScheduledOps() {\n    return (this.queue.length > 0);\n  }\n\n  // Check if the node has a specific role.\n  hasRole(role) {\n    return this.roles.includes(role);\n  }\n}\n\nexport default Node;\n","import MessageOp from './MessageOp';\n\n/*\nWhen a node wants to send a broadcast, there are two options: either send\nall messages at once or send them one by one. The difference is how \"fast\"\nthe sender is.\nThis class is a helper to send messages one by one, consuming a tick for each.\nThe node uses this class to \"schedule\" messages, they are added to the queue\nand executed as any other command.\n*/\nclass DeliverOp {\n  constructor(messagesToDeliver) {\n    if (!Array.isArray(messagesToDeliver)) {\n      throw new Error(\"The parameter has to be a list\");\n    }\n    messagesToDeliver.forEach(msg => {\n      if (!(msg instanceof MessageOp)) {\n        throw new Error(\"Can only deliver MessageOp instances: \" + JSON.stringify(msg));\n      }\n    });\n    this.messagesToDeliver = messagesToDeliver;\n  }\n\n  execute(node, tickNumber) {\n    this.messagesToDeliver.forEach(msg => {\n      console.log(`Sent ${msg.op} to ${msg.to}`);\n      node.messageBroker.sendMessage(msg);\n    });\n  }\n}\n\nexport default DeliverOp;\n","import MessageOp from '../MessageOp';\n\n/*\nProcessing of accepted messages.\n*/\nclass AcceptedOp extends MessageOp {\n  constructor(toName, fromName, paxosInstanceId, value) {\n    super(toName, fromName);\n    this.paxosInstanceId = paxosInstanceId;\n    this.value = value;\n  }\n  execute(node, tickNumber) {\n    console.log(`Learner ${node.name} notified about value ${this.value} at index ${this.paxosInstanceId}`);\n    const paxosInstance = node.state.paxos[this.paxosInstanceId];\n    if (paxosInstance.gotFinalValue(this.from, this.value)) {\n      console.log(`Got final value ${paxosInstance.finalValue} for ${paxosInstance.instanceId}`);\n      node.logFinalValue(paxosInstance.instanceId, paxosInstance.finalValue);\n    } else {\n      console.log(\"Not yet\");\n    }\n  }\n}\n\nexport default AcceptedOp;\n","import MessageOp from '../MessageOp';\nimport AcceptedOp from './AcceptedOp';\nimport DeliverOp from '../DeliverOp';\n\n/*\nProcessing of accept message\n*/\nclass AcceptOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber, paxosInstanceId, value) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n    this.paxosInstanceId = paxosInstanceId;\n    this.value = value;\n  }\n  execute(node, tickNumber) {\n    const paxosInstance = node.state.paxos[this.paxosInstanceId];\n    if (paxosInstance.isBehind(this.proposalNumber, this.from)||\n      paxosInstance.isSame(this.proposalNumber, this.from)) {\n        console.log('Accept is legit, accepting');\n        paxosInstance.accept(this.proposalNumber, this.from, this.value);\n        const learners = node.messageBroker.findByRole('paxos', true);\n        learners.forEach(learner => {\n          const accepted = new AcceptedOp(learner.name, node.name, paxosInstance.instanceId, this.value);\n          const deliverOp = new DeliverOp([accepted]);\n          node.scheduleOp(deliverOp);\n        });\n    } else {\n      console.log('Already past, ignoring accept.');\n    }\n  }\n}\n\nexport default AcceptOp;\n","import MessageOp from '../MessageOp';\nimport DeliverOp from '../DeliverOp';\nimport AcceptOp from './AcceptOp';\n\n/*\nCalled on proposers when promise is received\n*/\nclass PromiseOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber, paxosInstanceId, acceptedValue) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n    this.paxosInstanceId = paxosInstanceId;\n    this.acceptedValue = acceptedValue;\n  }\n  execute(node, tickNumber) {\n    console.log(`Got promise from ${this.from} on ${this.proposalNumber} for instance ${this.paxosInstanceId}`);\n    const paxosInstance = node.state.paxos[this.paxosInstanceId];\n    console.assert(paxosInstance);\n    paxosInstance.promises[this.from] = this.acceptedValue;\n    const promisesCount = Object.keys(paxosInstance.promises).length;\n    if (promisesCount === paxosInstance.majority) {\n      var value = paxosInstance.pickLargestAcceptedValue();\n      console.log(`Largest promise ${value}`);\n      if (!value) {\n        value = node.state.valueToSend;\n      }\n      console.log(`Got majority (${paxosInstance.majority}) and the value to send is ${value}`);\n      const acceptors = node.messageBroker.findByRole('paxos', true);\n      acceptors.forEach(acceptor => {\n        console.log(`Scheduling accept for ${acceptor.name} value ${value} in ${this.proposalNumber}@${paxosInstance.instanceId}`);\n        const accept = new AcceptOp(acceptor.name, node.name, this.proposalNumber, paxosInstance.instanceId, value);\n        const deliverOp = new DeliverOp([accept]);\n        node.scheduleOp(deliverOp);\n      });\n    }\n    if (promisesCount > paxosInstance.majority) {\n      console.log(\"Past majority already, ignoring\");\n    }\n\n  }\n}\n\nexport default PromiseOp;\n","/*\nOne paxos insance is created for each item in log.\n*/\nclass Paxos {\n  constructor(instanceId, nodesCount) {\n    this.instanceId = instanceId;\n    this.majority = Math.floor(nodesCount/2) + 1;\n    this.proposalNumber = 1;\n    this.promisedProposalNumber = 0;\n    this.promisedProposalTo = 0;\n    this.promises = {};\n    this.acceptedValue = {};\n    this.acceptedByOthers = {};\n    this.finalValue = null;\n  }\n\n  updatePromise(proposalNumber, from) {\n    if (this.isBehind(proposalNumber, from)) {\n      this.promisedProposalNumber = proposalNumber;\n      this.promisedProposalTo = from;\n    } else {\n      throw new Error(\"Should never happen, as there is a check earlier\");\n    }\n  }\n\n  isBehind(proposalNumber, from) {\n    if (proposalNumber > this.promisedProposalNumber) {\n      return true;\n    }\n    if ((proposalNumber === this.promisedProposalNumber)\n      && (from > this.promisedProposalTo)) {\n      return true;\n    }\n    return false;\n  }\n\n  isSame(proposalNumber, from) {\n    if ((proposalNumber === this.promisedProposalNumber)\n      && (from === this.promisedProposalTo)) {\n      return true;\n    }\n    return false;\n  }\n\n  accept(proposalNumber, from, value) {\n    if (this.isBehind(proposalNumber, from) || this.isSame(proposalNumber, from)) {\n      this.acceptedValue = {\n        proposalNumber: proposalNumber,\n        proposedBy: from,\n        value: value\n      };\n    } else {\n      throw new Error(\"Should never happen, as there is a check earlier\");\n    }\n  }\n\n  gotFinalValue(acceptedBy, value) {\n    if (this.finalValue) {\n      return true;\n    }\n    this.acceptedByOthers[acceptedBy] = value;\n    var majorValue = null;\n    var majorCount = 1;\n    Object.entries(this.acceptedByOthers).forEach(([k,v]) => {\n      if (majorValue === v) {\n        majorCount++;\n      } else {\n        if (majorCount === 1) {\n          majorValue = v;\n          majorCount = 1;\n        } else {\n          majorCount--;\n        }\n      }\n    });\n    if (majorCount === this.majority) {\n      console.assert(!this.finalValue || (this.finalValue === majorValue));\n      this.finalValue = majorValue;\n      return true;\n    }\n    return false;\n  }\n\n  pickLargestAcceptedValue() {\n    var selectedValue = null;\n    var maxProposalNumber = 0;\n    var maxProposedBy = '';\n    Object.entries(this.promises).forEach(([k,v]) => {\n      if ((v.proposalNumber > maxProposalNumber)||(\n        (v.proposalNumber === maxProposalNumber) &&\n        (v.proposedBy > maxProposedBy)\n      )) {\n        selectedValue = v.value;\n        maxProposalNumber = v.proposalNumber;\n        maxProposedBy = v.proposedBy;\n      }\n    });\n    return selectedValue;\n  }\n}\n\nexport default Paxos;\n","import MessageOp from '../MessageOp';\nimport PromiseOp from './PromiseOp';\nimport Paxos from './Paxos';\n\n/*\nCalled on acceptors on prepare request\n*/\nclass PrepareOp extends MessageOp {\n  constructor(toName, fromName, proposalNumber, paxosInstanceId) {\n    super(toName, fromName);\n    this.proposalNumber = proposalNumber;\n    this.paxosInstanceId = paxosInstanceId;\n  }\n  execute(node, tickNumber) {\n    console.log(`Got prepare from ${this.from} for instance ${this.paxosInstanceId} and proposalNum ${this.proposalNumber}`);\n    var paxosInstance;\n    if (node.state.paxos[this.paxosInstanceId]) {\n      paxosInstance = node.state.paxos[this.paxosInstanceId];\n    } else {\n      paxosInstance = new Paxos(this.paxosInstanceId, 3);\n      node.state.paxos[this.paxosInstanceId] = paxosInstance;\n    }\n    //if (this.proposalNumber > paxosInstance.promisedProposalNumber) {\n    if (paxosInstance.isBehind(this.proposalNumber, this.from)) {\n      paxosInstance.updatePromise(this.proposalNumber, this.from);\n      // send promise back to proposer\n      node.messageBroker.sendMessage(new PromiseOp(\n        this.from,\n        node.name,\n        paxosInstance.promisedProposalNumber,\n        paxosInstance.instanceId,\n        paxosInstance.acceptedValue));\n    } else {\n      console.log(`Too old, current is ${paxosInstance.promisedProposalNumber}, ignoring`);\n    }\n\n    // if ((this.proposalNumber > node.state.proposalNumber)||\n    //   ((this.proposalNumber === node.state.proposalNumber)&&(this.from > node.state.proposedBy))) {\n    //   console.log(`Promising ${this.proposalNumber} to ${this.from}`);\n    //   node.state.proposalNumber = this.proposalNumber;\n    //   node.state.proposedBy = this.from;\n    //   node.messageBroker.sendMessage(\n    //     new PromiseOp(this.from, node.name, node.state.proposalNumber, node.state.acceptedValue));\n    // } else {\n    //   console.log(`Prepare is too old ${this.proposalNumber} vs ${node.state.proposalNumber}, and ${this.from} vs ${node.state.proposedBy}. Ignoring.`);\n    // }\n  }\n}\n\nexport default PrepareOp;\n","import MessageOp from '../MessageOp';\n\n/*\nUpdate result of a paxos run. A number is either accepted or rejected.\n*/\nclass CustomerResultOp extends MessageOp {\n  constructor(toName, fromName, value, status) {\n    super(toName, fromName);\n    this.value = value;\n    this.status = status;\n  }\n\n  execute(node, tickNumber) {\n    node.state.progress[this.value] = this.status;\n  }\n}\n\nexport default CustomerResultOp;\n","import Node from '../Node';\nimport DeliverOp from '../DeliverOp';\nimport PrepareOp from './PrepareOp';\nimport Paxos from './Paxos';\nimport CustomerResultOp from './CustomerResultOp';\n\n/*\nPaxos node with all three roles: proposer, acceptor and learners.\nNode may be asked to propose a number and then the client is notified\nif the value is accepted or not (in case some other value was chosen).\n*/\nclass PaxosNode extends Node {\n  constructor(name) {\n    super(name, 'paxos');\n    this.queue = [];\n    this.state['log'] = [];\n    this.state['paxos'] = {};\n  }\n\n  scheduleOp(message) {\n    super.scheduleOp(message);\n  }\n\n  addToLog(value) {\n    const indexToAdd = this.state.log.length;\n    console.log(`${this.name} asked to add ${value} to log at index ${indexToAdd}`);\n    this.state.valueToSend = value;\n    this.state.valueToSendAtIndex = indexToAdd;\n    const paxosInstance = new Paxos(indexToAdd, 3);\n    this.state.paxos[indexToAdd] = paxosInstance;\n    const nodes = this.messageBroker.findByRole('paxos', true);\n    nodes.forEach(node => {\n      const prepare = new PrepareOp(\n        node.name,\n        this.name,\n        paxosInstance.proposalNumber,\n        paxosInstance.instanceId);\n      const deliverOp = new DeliverOp([prepare]);\n      this.scheduleOp(deliverOp);\n    });\n  }\n\n  logFinalValue(logIndex, value) {\n    const currentEntry = this.state.log[logIndex];\n    if (currentEntry) {\n      if (currentEntry !== value) {\n        throw new Error(`Got ${value} at [${logIndex}], while expecting ${currentEntry}`);\n      }\n    } else {\n      this.state.log[logIndex] = value;\n      console.log(`Learned about ${value} for index ${logIndex}`);\n      if (this.state.valueToSendAtIndex === logIndex) {\n        // we asked for this index\n        if (value === this.state.valueToSend) {\n          // tell client ok\n          this.messageBroker.sendMessage(new CustomerResultOp(\n            'client', this.name, this.state.valueToSend, 'accepted'\n          ));\n        } else {\n          // tell client decline\n          this.messageBroker.sendMessage(new CustomerResultOp(\n            'client', this.name, this.state.valueToSend, 'not accepted'\n          ));\n        }\n        this.state.valueToSend = null;\n        this.state.valueToSendAtIndex = 0;\n      }\n    }\n  }\n}\n\nexport default PaxosNode;\n","/*\nTake not yet committed number and send to a random non-busy paxos node.\n*/\nclass CustomerCommand {\n  constructor() {\n    this.op = this.constructor.name;\n  }\n\n  execute(node, tickNumber) {\n    // when called, takes next command-value and sends to a random paxos node\n    const paxosNodes = node.messageBroker.findByRole('paxos', true);\n    var value;\n    node.state.values.forEach(v => {\n      if (!value) {\n        if (!node.state.progress[v]\n          || ((node.state.progress[v] !== 'accepted')\n        && !node.state.progress[v].startsWith('in-progress'))) {\n              value = v;\n        }\n      }\n    });\n    if (value) {\n      var sent = false;\n      for (var i = 0; i < paxosNodes.length; i++) {\n        if (!paxosNodes[i].state.valueToSend) {\n          paxosNodes[i].addToLog(value);\n          node.state.progress[value] = 'in-progress:' + paxosNodes[i].name;\n          sent = true;\n          break;\n        }\n      }\n      if (!sent) {\n        node.state.progress[value] = 'nodes-busy';\n      }\n    } else {\n      console.log(\"No more values\");\n    }\n  }\n}\n\nexport default CustomerCommand;\n","import Node from '../Node';\nimport CustomerCommand from './CustomerCommand';\n\n/*\nClient proposes a value and tracks progress.\n*/\nclass ClientNode extends Node {\n  constructor() {\n    super('client', 'client');\n    this.state.values = [1,2,3,4,5,6,7,8,9];\n    this.state.progress = {};\n  }\n\n  sendNext() {\n    console.log(\"Init send command\");\n    this.scheduleOp(new CustomerCommand());\n  }\n}\n\nexport default ClientNode;\n","import PaxosNode from './PaxosNode';\nimport ClientNode from './ClientNode';\nimport Button from '@material-ui/core/Button';\n\nclass Initializer {\n  create(messageBroker) {\n    this.clientNode = new ClientNode();\n    this.clientNode.bind(messageBroker);\n    new PaxosNode('PaxosNode-A').bind(messageBroker);\n    new PaxosNode('PaxosNode-B').bind(messageBroker);\n    new PaxosNode('PaxosNode-C').bind(messageBroker);\n    this.send = this.send.bind(this);\n  }\n\n  controlUI() {\n    return (\n      <div>\n        <h1>Multi Paxos</h1>\n        <div>Open debug console to see log message. Keep clicking Tick for step-by-step progress.</div>\n        <div>On SendMessage the client proposes a not-yet committed number to a random paxos node.\n        The node initates a paxos instance to write the number to the log and report the\n        status to the client. Basically, click SendMessage and keep clicking Tick.</div>\n        <Button variant=\"contained\" onClick={this.send}>Send message</Button>\n      </div>\n    );\n  }\n\n  send() {\n    this.clientNode.sendNext();\n  }\n}\n\nexport default Initializer;\n","/*\nNon sendable operation, which sleeps for the given number of ticks.\nThis operation may simulate a node being busy. The node will still be\nable to receive messages, but win't process them.\n*/\nclass PauseOp {\n  constructor(sleep) {\n    this.sleep = sleep;\n  }\n\n  execute(node, tickNumber) {\n    if (this.sleep > 1) {\n      console.log(\"Still sleeping for \" + (this.sleep - 1));\n      node.scheduleOpOnTop(new PauseOp(this.sleep - 1));\n    } else {\n      console.log(\"Slept enough\");\n    }\n  }\n\n}\n\nexport default PauseOp;\n","import './App.css';\nimport MessageBroker from './MessageBroker';\n//import Initializer from './heartbeat/HeartBeatExample'\n//import Initializer from './ping/PingExample'\n//import Initializer from './basic-paxos/BasicPaxosExample'\nimport Initializer from './multi-paxos/MultiPaxosExample'\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport PauseOp from './PauseOp';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messageBroker = new MessageBroker();\n    this.example = new Initializer();\n    this.example.create(this.messageBroker);\n    if (this.messageBroker.nodes.length === 0) {\n      throw new Error(\"No nodes to work with\");\n    }\n    this.state = {\n      nodes: [...this.messageBroker.nodes],\n      tick: 1,\n      brokenLinks: \"[]\",\n      sleepTicks: \"0\",\n      nodeToSleep: this.messageBroker.nodes[0].name\n    }\n    this.tick = this.tick.bind(this);\n    this.handleBrokenLinksChange = this.handleBrokenLinksChange.bind(this);\n    this.handleSleepTicksChange = this.handleSleepTicksChange.bind(this);\n    this.handleNodeToSleepChange = this.handleNodeToSleepChange.bind(this);\n    this.addSleepToNode = this.addSleepToNode.bind(this);\n  }\n\n  /*\n  The \"main\" method. On exec it goes over all nodes and executes one\n  operation from nodes' queues.\n  */\n  tick() {\n    if (!this.messageBroker.validateBrokenLinks()) {\n      return;\n    }\n    console.log(\"Start with tick \" + this.state.tick);\n    const scheduledTicks = [];\n    this.state.nodes.forEach(node => {\n      if (node.hasScheduledOps()) {\n        scheduledTicks.push(node);\n      }\n    });\n    scheduledTicks.forEach(node => {\n      console.log(\"Tick on \" + node.name);\n      node.tick(this.state.tick);\n    });\n    console.log(\"Done with tick \" + this.state.tick);\n    console.log(\"------------------------\");\n    const newTick = this.state.tick + 1;\n    const newNodes = [...this.messageBroker.nodes];\n    this.setState({\n      tick: newTick,\n      nodes: newNodes,\n    });\n  }\n\n  /*\n  Simulates a node being \"frozen\" for a bit.\n  */\n  addSleepToNode() {\n    this.state.nodes.forEach(node => {\n      if (node.name === this.state.nodeToSleep) {\n        console.log(\"Added sleep to \" + node.name);\n        node.scheduleOpOnTop(new PauseOp(parseInt(this.state.sleepTicks)));\n      }\n    });\n    this.setState({nodes: [...this.state.nodes]});\n  }\n\n  handleBrokenLinksChange(event) {\n    this.messageBroker.setBrokenLinks(event.target.value);\n    this.setState({brokenLinks: event.target.value});\n  }\n\n  handleSleepTicksChange(event) {\n    this.setState({sleepTicks: event.target.value});\n  }\n\n  handleNodeToSleepChange(event) {\n    this.setState({nodeToSleep: event.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        {this.example.controlUI()}\n        <Button variant=\"contained\" onClick={this.tick}>Tick ({this.state.tick})</Button><br/>\n        <TableContainer>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Node name</TableCell>\n                <TableCell>Incoming queue</TableCell>\n                <TableCell>State</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.nodes.map((node) => (\n                <TableRow key={node.name}>\n                  <TableCell>\n                    {node.name}\n                  </TableCell>\n                  <TableCell>\n                    {node.queue.map((item, ind) => (<div key={node.name + item.op + ind}>{JSON.stringify(item)}</div>))}\n                  </TableCell>\n                  <TableCell>\n                  {Object.entries(node.state).map(([k,v]) => (\n                    <div key={node.name + k}><pre>{k}: {JSON.stringify(v, null, 2)}</pre></div>\n                  ))}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TextField\n        label='Json list of pairs of broken list. E.g. [[\"A\", \"B\"], [\"A\", \"C\"]] messages b/n A<->B and A<->C will be dropped.'\n        value={this.state.brokenLinks}\n        onChange={this.handleBrokenLinksChange}\n        multiline={true}\n        fullWidth={true}\n        rows=\"10\" /><br/>\n        <TextField\n        label='Sleep length in ticks'\n        value={this.state.sleepTicks}\n        onChange={this.handleSleepTicksChange}\n        multiline={false}\n        fullWidth={false}\n        rows=\"1\" />\n        <Select value={this.state.nodeToSleep} onChange={this.handleNodeToSleepChange}>\n          {this.state.nodes.map(node => (\n            <MenuItem key={node.name} value={node.name}>{node.name}</MenuItem>\n          ))}\n        </Select>\n        <Button variant=\"contained\" onClick={this.addSleepToNode}>Add sleep to {this.state.nodeToSleep}</Button><br/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}